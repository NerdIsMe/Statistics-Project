colnames(bus107_df)<-c("num","busNum","companyName")
print(bus107_df)
totalbus<-sum(bus107_df$busNum)
totalbus<-(totalbus-167)
proportion<-bus107_df$busNum/(totalbus)
bus107_df<-cbind(bus107_df,proportion)
print(bus107_df)
# 將資料依照不同客運公司取出來
bus107_1<-list()
bus107_2<-list()
bus107_3<-list()
bus107_4<-list()
bus107_5<-list()
bus107_6<-list()
bus107_7<-list()
bus107_8<-list()
bus107_9<-list()
bus107_10<-list()
bus107_11<-list()
bus107_12<-list()
bus107_13<-list()
bus107_14<-list()
for(i in 1:463)
{
if(bus107[i,9] == 1)
{
bus107_1<-rbind(bus107_1,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 2)
{
bus107_2<-rbind(bus107_2,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 3)
{
bus107_3<-rbind(bus107_3,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 4)
{
bus107_4<-rbind(bus107_4,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 5)
{
bus107_5<-rbind(bus107_5,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 6)
{
bus107_6<-rbind(bus107_6,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 7)
{
bus107_7<-rbind(bus107_7,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 8)
{
bus107_8<-rbind(bus107_8,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 9)
{
bus107_9<-rbind(bus107_9,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 10)
{
bus107_10<-rbind(bus107_10,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 11)
{
bus107_11<-rbind(bus107_11,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 12)
{
bus107_12<-rbind(bus107_12,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 13)
{
bus107_13<-rbind(bus107_13,bus107[i,])
}
}
for(i in 1:463)
{
if(bus107[i,9] == 14)
{
bus107_14<-rbind(bus107_14,bus107[i,])
}
}
print(typeof(bus107_1))
sample_num<-50
set.seed(11217)
bus107_1<-data.frame(bus107_1)
#print(bus107_1)
# random select 50*0.16 rows
bus107_1_sample<-bus107_1[sample(nrow(bus107_1), 8), ]
print(bus107_1_sample)
bus107_2<-data.frame(bus107_2)
#print(bus107_2)
# random select 50*0.13 rows
bus107_2_sample<-bus107_2[sample(nrow(bus107_2),7 ), ]
print(bus107_2_sample)
bus107_3<-data.frame(bus107_3)
#print(bus107_3)
# random select 50*0.15 rows
bus107_3_sample<-bus107_3[sample(nrow(bus107_3),8 ), ]
print(bus107_3_sample)
bus107_4<-data.frame(bus107_4)
#print(bus107_4)
# random select 50*0.04 rows
bus107_4_sample<-bus107_4[sample(nrow(bus107_4),2 ), ]
print(bus107_4_sample)
bus107_5<-data.frame(bus107_5)
#print(bus107_5)
# random select 50*0.07 rows
bus107_5_sample<-bus107_5[sample(nrow(bus107_5),4 ), ]
print(bus107_5_sample)
bus107_6<-data.frame(bus107_6)
#print(bus107_6)
# random select 50*0.06 rows
bus107_6_sample<-bus107_6[sample(nrow(bus107_6),3 ), ]
print(bus107_6_sample)
bus107_7<-data.frame(bus107_7)
#print(bus107_7)
# random select 50*0.01 rows
bus107_7_sample<-bus107_7[sample(nrow(bus107_7),1 ), ]
print(bus107_7_sample)
bus107_8<-data.frame(bus107_8)
#print(bus107_8)
# random select 50*0.1 rows
bus107_8_sample<-bus107_8[sample(nrow(bus107_8),5 ), ]
print(bus107_8_sample)
bus107_9<-data.frame(bus107_9)
#print(bus107_9)
# random select 50*0.1 rows
bus107_9_sample<-bus107_9[sample(nrow(bus107_9),5 ), ]
print(bus107_9_sample)
bus107_10<-data.frame(bus107_10)
#print(bus107_10)
# random select 50*0.06 rows
bus107_10_sample<-bus107_10[sample(nrow(bus107_10),3 ), ]
print(bus107_10_sample)
bus107_11<-data.frame(bus107_11)
#print(bus107_11)
# random select 50*0.06 rows
bus107_11_sample<-bus107_11[sample(nrow(bus107_11),3 ), ]
print(bus107_11_sample)
bus107_12<-data.frame(bus107_12)
#print(bus107_12)
# random select 50*0.02 rows
bus107_12_sample<-bus107_12[sample(nrow(bus107_12),1 ), ]
print(bus107_12_sample)
Sys.getlocale()
print("中文")
"中文"
bus107<-read_xlsx("../data/107busNew.xlsx")
company_count<-table(bus107$Company)
print(company_count)
company_name<-c("大都會客運","欣欣客運","首都客運","台北客運","東南客運","指南客運","大有巴士","大南汽車","光華巴士","中興巴士","三重客運","新店客運","淡水客運","聯營","無資料")
bus107_df<-data.frame(company_count,company_name)
colnames(bus107_df)<-c("num","busNum","companyName")
print(bus107_df)
totalbus<-sum(bus107_df$busNum)
totalbus<-(totalbus-167)
proportion<-bus107_df$busNum/(totalbus)
bus107_df<-cbind(bus107_df,proportion)
print(bus107_df)
jsonlite::fromJSON(txt = "data/Taipei.json")
j <- jsonlite::fromJSON(txt = "data/Taipei.json")
j$Geometry
linestring(j$Geometry)
linestring(j$Geometry)
jsonlite::parse_json(json = j)
jsonlite::parse_json(json = j$Geometry)
jsonlite::parse_json(json = "data/Taipei.json")
install.packages("geojsonR")
library(geojsonR)
init = TO_GeoJson$new()
init = TO_GeoJson$new()
init$LineString(j$Geometry)
remove.packages("geojsonR")
install.packages("wellknown")
library(wellknown)
library(wellknown)
linestring(j$Geometry)
typeof(linestring(j$Geometry))
typeof(j$Geometry)
as.array(j$Geometry)
years <- unique(bus$Year)
library(readxl)
bus <- read_excel("data/bus_efficiency_revised.xlsx")
print(bus)
years <- unique(bus$Year)
column <- colnames(bus)
bus_avg <- vector(mode="numeric", length = length(column))
for(i in 1:length(years)) {
row <- vector(mode="numeric", length = length(column))
row[1] <- years[i]
row[2] <- sum(bus$Year == years[i])
tmp <- bus[bus$Year == years[i],]
for(j in 3:length(column)) {
row[j] <- sum(as.numeric(unlist(bus[bus$Year == years[i],column[j]])))
}
bus_avg <- rbind(bus_avg, row)
}
bus_avg <- data.frame(bus_avg[2:nrow(bus_avg),], row.names = NULL, stringsAsFactors=FALSE)
colnames(bus_avg) <- c("Year", "Counts", column[3:length(column)])
bus_avg <- data.frame(lapply(bus_avg,as.numeric))
print(bus_avg)
for(co in colnames(bus_avg)[2:ncol(bus_avg)]) {
plot(bus_avg[, c("Year", co)], main=gsub("\\.", " ", paste("Line Chart of ", co), ".", " "))
lines(bus_avg[, c("Year", co)])
abline(lm(bus_avg[,co] ~ bus_avg$Year), col= "red")
}
print(cor(bus_avg))
j <- jsonlite::fromJSON(txt = "data/Taipei.json")
library(wellknown)
as.(j$Geometry)
years <- unique(bus$Year)
column <- colnames(bus)
bus_avg <- vector(mode="numeric", length = length(column))
for(i in 1:length(years)) {
row <- vector(mode="numeric", length = length(column))
row[1] <- years[i]
row[2] <- sum(bus$Year == years[i])
tmp <- bus[bus$Year == years[i],]
for(j in 3:length(column)) {
row[j] <- sd(as.numeric(unlist(bus[bus$Year == years[i],column[j]])))
}
bus_avg <- rbind(bus_avg, row)
}
bus_avg <- data.frame(bus_avg[2:nrow(bus_avg),], row.names = NULL, stringsAsFactors=FALSE)
colnames(bus_avg) <- c("Year", "Counts", column[3:length(column)])
bus_avg <- data.frame(lapply(bus_avg,as.numeric))
print(bus_avg)
abline(lm(bus_avg[,co] ~ bus_avg$Year), col= "red")
lines(bus_avg[, c("Year", co)])
bus_avg <- data.frame(lapply(bus_avg,as.numeric))
years <- unique(bus$Year)
column <- colnames(bus)
bus_avg <- vector(mode="numeric", length = length(column))
for(i in 1:length(years)) {
row <- vector(mode="numeric", length = length(column))
row[1] <- years[i]
row[2] <- sum(bus$Year == years[i])
tmp <- bus[bus$Year == years[i],]
for(j in 3:length(column)) {
row[j] <- sd(as.numeric(unlist(bus[bus$Year == years[i],column[j]])))
}
bus_avg <- rbind(bus_avg, row)
}
bus_avg <- data.frame(bus_avg[2:nrow(bus_avg),], row.names = NULL, stringsAsFactors=FALSE)
colnames(bus_avg) <- c("Year", "Counts", column[3:length(column)])
bus_avg <- data.frame(lapply(bus_avg,as.numeric))
print(bus_avg)
for(co in colnames(bus_avg)[2:ncol(bus_avg)]) {
plot(bus_avg[, c("Year", co)], main=gsub("\\.", " ", paste("Line Chart of ", co), ".", " "))
lines(bus_avg[, c("Year", co)])
abline(lm(bus_avg[,co] ~ bus_avg$Year), col= "red")
}
years <- unique(bus$Year)
column <- colnames(bus)
bus_avg <- vector(mode="numeric", length = length(column))
for(i in 1:length(years)) {
row <- vector(mode="numeric", length = length(column))
row[1] <- years[i]
row[2] <- sum(bus$Year == years[i])
tmp <- bus[bus$Year == years[i],]
for(j in 3:length(column)) {
row[j] <- mean(as.numeric(unlist(bus[bus$Year == years[i],column[j]])))
}
bus_avg <- rbind(bus_avg, row)
}
bus_avg <- data.frame(bus_avg[2:nrow(bus_avg),], row.names = NULL, stringsAsFactors=FALSE)
colnames(bus_avg) <- c("Year", "Counts", column[3:length(column)])
bus_avg <- data.frame(lapply(bus_avg,as.numeric))
print(bus_avg)
for(co in colnames(bus_avg)[2:ncol(bus_avg)]) {
plot(bus_avg[, c("Year", co)], main=gsub("\\.", " ", paste("Line Chart of ", co), ".", " "))
lines(bus_avg[, c("Year", co)])
abline(lm(bus_avg[,co] ~ bus_avg$Year), col= "red")
}
print(cor(bus_avg))
years <- unique(bus$Year)
column <- colnames(bus)
bus_avg <- vector(mode="numeric", length = length(column))
for(i in 1:length(years)) {
row <- vector(mode="numeric", length = length(column))
row[1] <- years[i]
row[2] <- sum(bus$Year == years[i])
tmp <- bus[bus$Year == years[i],]
for(j in 3:length(column)) {
row[j] <- mean(as.numeric(unlist(bus[bus$Year == years[i],column[j]])))
}
bus_avg <- rbind(bus_avg, row)
}
bus_avg <- data.frame(bus_avg[2:nrow(bus_avg),], row.names = NULL, stringsAsFactors=FALSE)
colnames(bus_avg) <- c("Year", "Counts", column[3:length(column)])
bus_avg <- data.frame(lapply(bus_avg,as.numeric))
print(bus_avg)
for(co in colnames(bus_avg)[2:ncol(bus_avg)]) {
plot(bus_avg[, c("Year", co)], main=gsub("\\.", " ", paste("Line Chart of ", co), ".", " "))
lines(bus_avg[, c("Year", co)])
abline(lm(bus_avg[,co] ~ bus_avg$Year), col= "red")
}
print(cor(bus_avg))
print(cor(bus_avg))
bus
print(cor(bus[,2:ncol(bus)]))
print(cor(as.numeric(bus[,2:ncol(bus)])))
bus[,2:ncol(bus)]
bus[,3:ncol(bus)]
cor(bus[,3:ncol(bus)])
print(cor(bus[,3:ncol(bus)]))
jsonlite::fromJSON(txt = "data/Taipei.json")
jsonlite::fromJSON(txt = "data/Taipei.json")
j <- jsonlite::fromJSON(txt = "data/Taipei.json")
a <- j$Geometry
a
a[13:length(a)]
a[1:2]
typeof(a)
a[1]
a[1][1]
strsplit(a, " ")
s <- strsplit(a, " ")
s[2:length(s)]
s[3:length(s)]
length(s)
length(a)
size(a)
toString(a)
length(toString(a))
length(toString(a)[1])
length(toString(a[1]))
typeof(toString(a))
as.list(a)
(a[[1]])
length(a[[1]])
as.list(strsplit(a, " "))
typeof(as.list(strsplit(a, " ")))
c(strsplit(a, " "))
c(strsplit(a, " "))[1]
as.list(strsplit(a, " "))[1]
list(strsplit(a, " "))[1]
as.vector(strsplit(a, " "))
as.vector(strsplit(a, " "))[1]
as.vector(strsplit(a, " "))[2]
strsplit(a, " ")[1]
data.frame(strsplit(a, " "))
d <- data.frame(strsplit(a, " ")),]
d <- data.frame(strsplit(a, " "))
d <- data.frame(strsplit(a, " "))
d <- d[2:nrow(d),]
d
d[1]
d[1] <- substring(d[1], 2)
substring(d[1], 2)
substring(d[1], 1)
substring(d[1])
d
d <- data.frame(strsplit(a, " "))
d <- d[1:nrow(d),]
d
d <- data.frame(strsplit(a, " "))
d
d[2]
d[2,1]
substring(d[2,1], 2)
d[1,2] <- substring(d[2,1], 2)
d
d <- data.frame(strsplit(a, " "))
d[2,1] <- substring(d[2,1], 2)
d
d <- data.frame(strsplit(a, " "))
d[2,1] <- substring(d[2,1], 2)
d
substring(d[2,1], 2)
d <- data.frame(strsplit(a, " "))
substring(d[2,1], 2)
foo <- function() {
routes <- jsonlite::fromJSON(txt = "data/Routes.json")
geo <- vector(length = nrow(routes))
for (i in 1:nrow(routes)) {
tmp <- as.data.frame(matrix(as.numeric(unlist(strsplit(unlist(as.list(strsplit(substring(routes$Geometry[1],13,nchar(routes$Geometry[1])-1), ", ")[[1]])), " "))), ncol=2, byrow=TRUE))
colnames(tmp) <- c("longitude", "latitude")
geo[i] <- tmp
}
routes <- structure(geo, class="data.frame", row.names=c(NA, -nrow(routes)))
return(routes)
}
r <- suppressWarnings(foo())
r[1,]
head(r)
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
structure(list(a,b,c), class = "data.frame", row.names)
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
structure(list(a,b,c), class = "data.frame")
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
structure(list(a,b,c), class = "data.frame", row.names = c(NA, -3L))
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
structure(list(a,b,c), class = "data.frame", row.names = c(NA, -3L))[1]
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
structure(list(a,b,c), class = "data.frame", row.names = c(NA, -3L))[1,1]
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
structure(list(a,b,c), class = "data.frame", row.names = c(NA, -3L))[1,1][1]
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
head(structure(list(a,b,c), class = "data.frame", row.names = c(NA, -3L))[1,1])
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(a,b,c), class = "data.frame", row.names = c(NA, -3L))
d
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(A=a,B=b,C=c), class = "data.frame", row.names = c(NA, -3L))
d
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(A=a,B=b,C=c), class = "data.frame", row.names = c(NA, -1L))
d
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(A=a,B=b,C=c), class = "data.frame", row.names = c(NA, 3))
d
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(A=a,B=b,C=c), class = "data.frame", row.names = c(NA, 1))
d
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(A=a,B=b,C=c), class = "data.frame", row.names = c(NA, -3L))
d
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(A=a,B=b,C=c), class = "data.frame", row.names = c(NA, -1))
d
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(A=a,B=b,C=c), class = "data.frame", row.names = c(NA, -3))
d
a <- data.frame(c(1,2,3))
b <- data.frame(c(4,5,6))
c <- data.frame(c(7,8,9))
d <- structure(list(A=a,B=b,C=c), class = "data.frame", row.names = c(NA, -2))
d
routes <- jsonlite::fromJSON(txt = "data/Routes.json")
print(head(routes))
print(head(routes$RouteName))
geo <- as.data.frame(matrix(as.numeric(unlist(strsplit(unlist(as.list(strsplit(substring(routes$Geometry[1],13,nchar(routes$Geometry[1])-1), ", ")[[1]])), " "))), ncol=2, byrow=TRUE))
colnames(geo) <- c("longitude", "latitude")
print(geo)
print(head(routes$RouteName$Zh_tw))
print(head(routes$RouteName))
print(head(routes$RouteName))
print(head(routes$RouteName$Zh_tw))
geo <- as.data.frame(matrix(as.numeric(unlist(strsplit(unlist(as.list(strsplit(substring(routes$Geometry[5],13,nchar(routes$Geometry[5])-1), ", ")[[1]])), " "))), ncol=2, byrow=TRUE))
colnames(geo) <- c("longitude", "latitude")
print(geo)
nrow(routes)
